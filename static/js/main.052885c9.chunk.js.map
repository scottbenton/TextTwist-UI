{"version":3,"sources":["Components/UniversalComponents/TextBadge.jsx","Components/WordDisplay/RemainingWords.jsx","Components/PageHeader/ShuffleButton.jsx","Components/PageHeader/UserInput.jsx","Components/PageHeader/RequestButton.jsx","Components/PageHeader/Instructions.jsx","Components/PageHeader/Score.jsx","Components/PageHeader/AnswersButton.jsx","Components/PageHeader/Header.jsx","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TwistTile","props","width","height","fontSize","color","badgeStyles","display","margin","border","borderRadius","textAlign","lineHeight","padding","style","className","children","RemainingWords","words","Container","Row","map","word","index","Col","key","xs","sm","md","lg","xl","Array","from","letter","found","ShuffleButton","setRack","onClick","prevRack","newRack","i","length","j","Math","floor","random","variant","marginLeft","marginRight","UserInput","setWords","rack","setScore","setStatus","React","useState","userInput","setUserInput","setAllUnused","useCallback","forEach","char","used","console","log","handleKeyDown","event","preventDefault","toUpperCase","removedChar","prevInput","slice","match","newInput","prevWords","foundWord","findIndex","newWords","prevScore","useEffect","document","addEventListener","removeEventListener","styles","colStyle","centeringDiv","badgeStyle","CORS_API","PHP_URL","RequestButton","loading","setLoading","float","evt","axios","method","url","then","results","rackChars","data","wordsObject","Object","keys","wordsArray","wordObj","push","disabled","Instructions","maxWidth","Score","score","AnswersButton","Header","status","jumbotronBase","transition","backgroundColor","NONE","ERROR","CORRECT","container","fluid","MainPage","timeout","setTimeout","clearTimeout","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAEe,SAASA,EAAUC,GAAQ,IAChCC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACNC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,MAEXC,EAAc,CAChBC,QAAS,eACTC,OAAQ,MACRC,OAAQ,uBACRC,aAAc,QACdN,SAAUA,EACVO,UAAW,SACXC,WAAY,IACZC,QAAS,UAUb,OAPGX,IACCI,EAAYJ,MAAQA,GAErBC,IACCG,EAAYH,OAASA,GAIrB,yBAAKW,MAAOR,EAAaS,WAAsB,cAAVV,EAAwB,eAAiB,cAAgB,eACzFJ,EAAMe,UCrBJ,SAASC,EAAehB,GAAQ,IACnCiB,EAAUjB,EAAViB,MAER,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACP,kBAACC,EAAA,EAAD,CAAKC,IAAKF,EAAOG,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC7CC,MAAMC,KAAKV,EAAKA,MAAMD,KAAI,SAACY,EAAQV,GAAT,OACvB,kBAAC,EAAD,CAAOE,IAAKF,EAAOlB,MAAO,UAAWH,MAAO,GAAIC,OAAQ,GAAIC,SAAU,IAChEkB,EAAKY,MAAQD,EAAS,a,2BCZzC,SAASE,EAAclC,GAAQ,IAClCmC,EAAYnC,EAAZmC,QAcR,OACI,kBAAC,IAAD,CAAQC,QAbQ,WAChBD,GAAQ,SAAAE,GAGJ,IAFA,IAAIC,EAAO,YAAOD,GAETE,EAAID,EAAQE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAEd,CAACD,EAAQG,GAAIH,EAAQC,IAA/CD,EAAQC,GAFgC,KAE5BD,EAAQG,GAFoB,KAI7C,OAAOH,MAKmBO,QAAS,oBAAqBhC,MAAO,CAACiC,WAAY,OAAQC,YAAa,SAArG,UCZO,SAASC,EAAUhD,GAAQ,IAC9BiD,EAAiDjD,EAAjDiD,SAAUC,EAAuClD,EAAvCkD,KAAMf,EAAiCnC,EAAjCmC,QAASgB,EAAwBnD,EAAxBmD,SAAUC,EAAcpD,EAAdoD,UADN,EAGHC,IAAMC,SAAS,IAHZ,mBAG9BC,EAH8B,KAGnBC,EAHmB,KAK/BC,EAAeC,uBAAY,WAC7BvB,GAAQ,SAAAE,GACJ,IAAIC,EAAO,YAAOD,GAKlB,OAJAC,EAAQqB,SAAQ,SAAAC,GACZA,EAAKC,MAAO,KAEhBC,QAAQC,IAAIzB,GACLA,OAEZ,CAACH,IAEE6B,EAAgBN,uBAAY,SAACO,GAC/BA,EAAMC,iBACN,IAAI1C,EAAMyC,EAAMzC,IAAI2C,cACpB,GAAY,cAAR3C,EAAqB,CACrB,IAAI4C,EAAc,GAClBZ,GAAa,SAAAa,GAET,OADAD,EAAcC,EAAUA,EAAU7B,OAAS,GACpC6B,EAAU7B,OAAS,EAAI6B,EAAUC,MAAM,GAAI,GAAKD,KAEvDD,GACAjC,GAAQ,SAAAE,GACJ,IAAIa,EAAI,YAAOb,GACXJ,GAAQ,EACRK,EAAUY,EAAK9B,KAAI,SAACwC,GACpB,OAAK3B,GAAS2B,EAAKC,MAAQD,EAAKA,OAASQ,GACrCnC,GAAQ,EACD,CAAE2B,KAAMA,EAAKA,KAAMC,MAAM,IAGzBD,KAGf,OAAI3B,EACOK,EAEAD,UAMlB,GAAmB,IAAfb,EAAIgB,QAAgBhB,EAAI+C,MAAM,UAAW,CAC9C,IAAItC,GAAQ,EACZE,GAAQ,SAAAE,GACJ,IACIC,EADI,YAAOD,GACIjB,KAAI,SAACwC,GACpB,OAAK3B,GAAST,IAAQoC,EAAKA,MAASA,EAAKC,KAK9BD,GAJP3B,GAAQ,EACD,CAAE2B,KAAMA,EAAKA,KAAMC,MAAM,OAMxC,OAAI5B,EACOK,EAEAD,KAGXJ,GACAuB,GAAa,SAAAa,GAET,OADAA,GAAa7C,SAKR,UAARA,GACLgC,GAAa,SAAAa,GACT,IAAIG,EAAWH,EAsBf,OArBApB,GAAS,SAAAwB,GACLX,QAAQC,IAAIU,GACZX,QAAQC,IAAIM,GACZ,IAAIK,EAAYD,EAAUE,WAAU,SAACtD,GACjC,OAAQA,EAAKY,OAASZ,EAAKA,OAASgD,KAExC,GAAIK,GAAa,EAAG,CAChBjB,IACAe,EAAW,GACX,IAAII,EAAQ,YAAOH,GAInB,OAHAG,EAASF,GAAWzC,OAAQ,EAC5BkB,GAAS,SAAA0B,GAAS,OAAIA,EAAY,MAClCzB,EAAU,WACHwB,EAKP,OAHAnB,IACAL,EAAU,SACVoB,EAAW,GACJC,KAGRD,OAGhB,CAACf,EAActB,EAASc,EAAUE,IAGrC2B,qBAAU,WACNhB,QAAQC,IAAIR,KACb,CAACA,IAEJuB,qBAAU,WAIN,OAFAC,SAASC,iBAAiB,WAAW,SAACf,GAAD,OAAWD,EAAcC,MAEvD,WACHc,SAASE,oBAAoB,WAAW,SAAChB,GAAD,OAAWD,EAAcC,SAEtE,CAACD,IAEJ,IAAIkB,EAAS,CACTC,SAAU,CACNhF,SAAU,OACVF,MAAO,OACPS,UAAW,SACXE,QAAS,OAEbwE,aAAc,CACVnF,MAAO,OACPK,QAAS,eACTC,OAAQ,UAEZ8E,WAAY,CACR/E,QAAS,eACTC,OAAQ,MACRN,MAAO,OACPO,OAAQ,wBACRC,aAAc,OACdP,OAAQ,OACRQ,UAAW,SACXC,WAAY,MAKpB,OACI,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAKV,MAAOqE,EAAOC,UACf,yBAAKtE,MAAOqE,EAAOE,cACdtD,MAAMC,KAAKwB,GAAWnC,KAAI,SAACwC,EAAMtC,GAAP,OACvB,kBAAC,EAAD,CAAOE,IAAKF,EAAOlB,MAAO,UAAWD,SAAU,GAAIF,MAAO,GAAIC,OAAQ,IACjE0D,SAMrB,kBAACzC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAKE,GAAI,IACT,kBAACF,EAAA,EAAD,CAAKE,GAAI,GAAIZ,MAAOqE,EAAOC,UACvB,yBAAKtE,MAAOqE,EAAOE,cACdlC,EAAK9B,KAAI,SAACwC,EAAMtC,GAAP,OAAkBsC,EAAKC,KAAO,KAChC,kBAAC,EAAD,CAAOrC,IAAKF,EAAOlB,MAAO,YAAaD,SAAU,GAAIF,MAAO,GAAIC,OAAQ,IACnE0D,EAAKA,WAK1B,kBAACrC,EAAA,EAAD,CAAKE,GAAI,GACL,kBAACS,EAAD,CAAeC,QAASA,O,qBCxKtCmD,EAAW,uCACXC,EAAU,0EAED,SAASC,EAAcxF,GAAQ,IAClCiD,EAAgCjD,EAAhCiD,SAAUd,EAAsBnC,EAAtBmC,QAAUgB,EAAYnD,EAAZmD,SADa,EAGXE,IAAMC,UAAS,GAHJ,mBAGlCmC,EAHkC,KAGzBC,EAHyB,KAgDzC,OACI,kBAAC,IAAD,CAAQ7E,MA3CK,CACT8E,MAAO,QA0CwB9C,QAAQ,UAAUT,QAtCxC,SAACwD,GACdA,EAAI1B,iBACJwB,GAAW,GAEXG,IAAM,CACFC,OAAQ,MACRC,IAAKT,EAAWC,IACjBS,MAAK,SAACC,GACL,IAAMC,EAAapE,MAAMC,KAAKkE,EAAQE,KAAKjD,MAC3CY,QAAQC,IAAImC,GACZ,IAAMhD,EAAOgD,EAAU9E,KAAI,SAACwC,GAAD,MAAW,CAACA,KAAMA,EAAKO,cAAeN,MAAM,MAEvEC,QAAQC,IAAIb,GACZf,EAAQe,GAER,IAAIkD,EAAcC,OAAOC,KAAKL,EAAQE,KAAKlF,OAC3C6C,QAAQC,IAAIqC,GACZ,IAAIG,EAAa,GACjBH,EAAYzC,SAAQ,SAACnC,GAEjB,GADAsC,QAAQC,IAAIvC,GACRyE,EAAQE,KAAKlF,MAAMO,GAAM,CACzB,IAAIgF,EAAU,CACVnF,KAAM4E,EAAQE,KAAKlF,MAAMO,GACzBS,OAAO,GAEXsE,EAAWE,KAAKD,OAIxB1C,QAAQC,IAAIwC,GACZtD,EAASsD,GAETpD,EAAS,GACTuC,GAAW,OAKyDgB,SAAUjB,GAC7EA,EAAU,aAAe,gBCvDvB,SAASkB,IAOpB,OACI,kBAACzF,EAAA,EAAD,CAAWL,MANA,CACPN,OAAQ,MACRqG,SAAU,SAKV,8EACA,4CACA,2BAEI,2CAFJ,6FAIA,2BACI,8CADJ,oBACgD,2CADhD,uGACuK,wCADvK,iDACqO,oCADrO,kHChBG,SAASC,EAAM7G,GAI1B,OACI,wBAAIa,MAJW,CACfP,QAAS,iBAGT,UACYN,EAAM8G,O,qBCLX,SAASC,EAAc/G,GAAQ,IACnCiD,EAAYjD,EAAZiD,SAgBP,OACI,kBAAC,IAAD,CAAQb,QAfQ,WAChBa,GAAS,SAAAwB,GACL,IAAIG,EAAQ,YAAOH,GAEnB,OADAG,EAASjB,SAAQ,SAACtC,GAAD,OAAUA,EAAKY,OAAQ,KACjC2C,MAWmB/B,QAAQ,kBAAkBhC,MANhD,CACJ8E,MAAO,UAKX,gBCPO,SAASqB,EAAOhH,GAAQ,IAC3BiH,EAAuEjH,EAAvEiH,OAAQ7D,EAA+DpD,EAA/DoD,UAAWnC,EAAoDjB,EAApDiB,MAAOgC,EAA6CjD,EAA7CiD,SAAUC,EAAmClD,EAAnCkD,KAAMf,EAA6BnC,EAA7BmC,QAAS2E,EAAoB9G,EAApB8G,MAAO3D,EAAanD,EAAbmD,SAQ5D+B,EAAS,CACXgC,cAAe,CACXtG,QAAS,MACTuG,WAAY,uBACZC,gBAVO,CACXC,KAAM,UACNC,MAAO,UACPC,QAAS,WAOmBN,IAE5BO,UAAW,CACPjH,OAAQ,MACRqG,SAAU,SAIlB,OAEI,kBAAC,IAAD,CAAWa,OAAK,EAAC5G,MAAOqE,EAAOgC,eAC3B,kBAAChG,EAAA,EAAD,CAAWL,MAAOqE,EAAOsC,WACrB,kBAACrG,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAKE,GAAI,IACL,kBAAC,EAAD,CAAWtB,SAAU,IAArB,gBAKR,kBAACgB,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAKE,GAAI,IAEe,IAAhByB,EAAKV,OAAe,kBAACmE,EAAD,MAChB,kBAAC3D,EAAD,CACI/B,MAAOA,EACPgC,SAAUA,EACVC,KAAMA,EACNf,QAASA,EACTgB,SAAUA,EACVC,UAAWA,MAK/B,kBAACjC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,GACZwB,EAAKV,OAAS,GAAK,kBAACqE,EAAD,CAAOC,MAAOA,KAEtC,kBAACvF,EAAA,EAAD,CAAKE,GAAI,EAAGC,GAAI,GACXwB,EAAKV,OAAS,GAAK,kBAACuE,EAAD,CAAe9D,SAAUA,KAEjD,kBAAC1B,EAAA,EAAD,CAAKE,GAAI,EAAGC,GAAI,GACZ,kBAAC8D,EAAD,CAAevC,SAAUA,EAAUd,QAASA,EAASgB,SAAUA,QChExE,SAASuE,EAAS1H,GAAQ,IAAD,EACVqD,IAAMC,SAAS,IADL,mBAC7BrC,EAD6B,KACtBgC,EADsB,OAEZI,IAAMC,SAAS,IAFH,mBAE7BJ,EAF6B,KAEvBf,EAFuB,OAGVkB,IAAMC,SAAS,GAHL,mBAG7BwD,EAH6B,KAGtB3D,EAHsB,OAKRE,IAAMC,SAAS,QALP,mBAK7B2D,EAL6B,KAKrB7D,EALqB,KAepC,OARA0B,qBAAU,WACN,IAAI6C,EAIJ,MAHc,SAAXV,IACCU,EAAUC,YAAW,kBAAMxE,EAAU,UAAS,MAE3C,kBAAMyE,aAAaF,MAC3B,CAACV,IAGA,oCACI,kBAACD,EAAD,CACI/F,MAAOA,EACPgC,SAAUA,EACVC,KAAMA,EACNf,QAASA,EACT2E,MAAOA,EACP3D,SAAUA,EACV8D,OAAQA,EACR7D,UAAWA,IAEf,kBAACpC,EAAD,CACIC,MAAOA,KCtBR6G,MANf,WACE,OACE,kBAACJ,EAAD,OCKgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3D,MACvB,2D,MCTN4D,IAASC,OAAO,kBAAC,EAAD,MAASrD,SAASsD,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.052885c9.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function TwistTile(props) {\n    var { width, height } = props;\n    const {fontSize, color} = props; // \"PRIMARY, SECONDARY\"\n\n    const badgeStyles = {\n        display: 'inline-block',\n        margin: '1px',\n        border: '2p solid transparent',\n        borderRadius: '.25em',\n        fontSize: fontSize,\n        textAlign: 'center',\n        lineHeight: '1',\n        padding: '.25rem',\n    }\n\n    if(width){\n        badgeStyles.width = width;\n    }\n    if(height){\n        badgeStyles.height = height;\n    }\n\n    return (\n        <div style={badgeStyles} className={(color === \"Secondary\" ? \"bg-secondary\" : \"bg-primary\") + \" text-white\"}>\n            {props.children}\n        </div>\n    )\n}","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Badge from '../UniversalComponents/TextBadge';\n\nexport default function RemainingWords(props) {\n    const { words } = props;\n    \n    return (\n        <Container>\n            <Row>\n                {words.map((word, index) => (\n                    <Col key={index} xs={12} sm={6} md={4} lg={3} xl={2}>\n                        {Array.from(word.word).map((letter, index) => (\n                            <Badge key={index} color={'Primary'} width={20} height={20} fontSize={16}>\n                                {(word.found ? letter : '')}\n                            </Badge>\n                        ))\n                        }\n                    </Col>\n                ))}\n            </Row>\n        </Container>\n    );\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nexport default function ShuffleButton(props) {\n    const { setRack } = props;\n\n    const shuffleRack = () => {\n        setRack(prevRack => {\n            var newRack = [...prevRack];\n\n            for (let i = newRack.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                [newRack[i], newRack[j]] = [newRack[j], newRack[i]];\n            }\n            return newRack;\n        })\n    }\n\n    return (\n        <Button onClick={shuffleRack} variant={'outline-secondary'} style={{marginLeft: 'auto', marginRight: 'auto'}}>\n            ↻\n        </Button>\n    )\n}","import React, { useEffect, useCallback } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport ShuffleButton from './ShuffleButton';\n\nimport Badge from '../UniversalComponents/TextBadge';\n\nexport default function UserInput(props) {\n    const { setWords, rack, setRack, setScore, setStatus } = props;\n\n    const [userInput, setUserInput] = React.useState('');\n\n    const setAllUnused = useCallback(() => {\n        setRack(prevRack => {\n            var newRack = [...prevRack];\n            newRack.forEach(char => {\n                char.used = false;\n            });\n            console.log(newRack);\n            return newRack;\n        })\n    }, [setRack]);\n\n    const handleKeyDown = useCallback((event) => {\n        event.preventDefault();\n        var key = event.key.toUpperCase();\n        if (key === 'BACKSPACE') {\n            var removedChar = '';\n            setUserInput(prevInput => {\n                removedChar = prevInput[prevInput.length - 1];\n                return prevInput.length > 0 ? prevInput.slice(0, -1) : prevInput;\n            })\n            if (removedChar) {\n                setRack(prevRack => {\n                    var rack = [...prevRack];\n                    var found = false;\n                    var newRack = rack.map((char) => {\n                        if (!found && char.used && char.char === removedChar) {\n                            found = true;\n                            return { char: char.char, used: false };\n                        }\n                        else {\n                            return char;\n                        }\n                    })\n                    if (found) {\n                        return newRack;\n                    } else {\n                        return prevRack;\n                    }\n                })\n            }\n        }\n        // If the key pressed was alphabetical.\n        else if (key.length === 1 && key.match(/[A-Z]/i)) {\n            var found = false;\n            setRack(prevRack => {\n                var rack = [...prevRack];\n                var newRack = rack.map((char) => {\n                    if (!found && key === char.char && !char.used) {\n                        found = true;\n                        return { char: char.char, used: true };\n                    }\n                    else {\n                        return char;\n                    }\n                });\n                if (found) {\n                    return newRack;\n                } else {\n                    return prevRack;\n                }\n            })\n            if (found) {\n                setUserInput(prevInput => {\n                    prevInput += key;\n                    return prevInput;\n                })\n            }\n        }\n        else if (key === \"ENTER\") {\n            setUserInput(prevInput => {\n                var newInput = prevInput;\n                setWords(prevWords => {\n                    console.log(prevWords);\n                    console.log(prevInput);\n                    var foundWord = prevWords.findIndex((word) => {\n                        return !word.found && word.word === prevInput;\n                    });\n                    if (foundWord >= 0) {\n                        setAllUnused();\n                        newInput = '';\n                        var newWords = [...prevWords];\n                        newWords[foundWord].found = true;\n                        setScore(prevScore => prevScore + 10);\n                        setStatus(\"CORRECT\");\n                        return newWords;\n                    } else {\n                        setAllUnused();\n                        setStatus(\"ERROR\");\n                        newInput = '';\n                        return prevWords;\n                    }\n                })\n                return newInput;\n            })\n        }\n    }, [setAllUnused, setRack, setWords, setScore]);\n\n\n    useEffect(() => {\n        console.log(userInput);\n    }, [userInput])\n\n    useEffect(() => {\n        // On load, add this event listener\n        document.addEventListener('keydown', (event) => handleKeyDown(event));\n        // On unload, remove this event listener\n        return () => {\n            document.removeEventListener('keydown', (event) => handleKeyDown(event));\n        }\n    }, [handleKeyDown]);\n\n    var styles = {\n        colStyle: {\n            fontSize: '36px',\n            width: '100%',\n            textAlign: 'center',\n            padding: '4px',\n        },\n        centeringDiv: {\n            width: '100%',\n            display: 'inline-block',\n            margin: '0 auto',\n        },\n        badgeStyle: {\n            display: 'inline-block',\n            margin: '4px',\n            width: '50px',\n            border: '5px solid transparent',\n            borderRadius: '15px',\n            height: '50px',\n            textAlign: 'center',\n            lineHeight: '1',\n        }\n    }\n\n\n    return (\n        <Container>\n            <Row>\n                <Col style={styles.colStyle}>\n                    <div style={styles.centeringDiv}>\n                        {Array.from(userInput).map((char, index) => (\n                            <Badge key={index} color={'Primary'} fontSize={36} width={50} height={50}>\n                                {char}\n                            </Badge>\n                        ))}\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={1} />\n                <Col xs={10} style={styles.colStyle}>\n                    <div style={styles.centeringDiv}>\n                        {rack.map((char, index) => (char.used ? null :\n                                <Badge key={index} color={'Secondary'} fontSize={36} width={50} height={50}>\n                                    {char.char}\n                                </Badge>\n                        ))}\n                    </div>\n                </Col>\n                <Col xs={1}>\n                    <ShuffleButton setRack={setRack} />\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport axios from 'axios';\n\nconst CORS_API = 'https://cors-anywhere.herokuapp.com/'\nconst PHP_URL = 'http://texttwistbackend-env.u2wnmj8hvu.us-east-2.elasticbeanstalk.com./';\n\nexport default function RequestButton(props) {\n    const { setWords, setRack , setScore} = props;\n\n    const [loading, setLoading] = React.useState(false);\n\n    const styles = {\n        buttonStyle: {\n            float: 'left',\n        }\n    }\n\n    const makeCall = (evt) => {\n        evt.preventDefault();\n        setLoading(true);\n\n        axios({\n            method: 'get',\n            url: CORS_API + PHP_URL,\n        }).then((results) => {\n            const rackChars = (Array.from(results.data.rack));\n            console.log(rackChars);\n            const rack = rackChars.map((char) => ({char: char.toUpperCase(), used: false}));\n\n            console.log(rack);\n            setRack(rack);\n\n            var wordsObject = Object.keys(results.data.words);\n            console.log(wordsObject);\n            var wordsArray = [];\n            wordsObject.forEach((key) => {\n                console.log(key);\n                if (results.data.words[key]) {\n                    var wordObj = {\n                        word: results.data.words[key],\n                        found: false,\n                    }\n                    wordsArray.push(wordObj);\n                }\n            });\n\n            console.log(wordsArray);\n            setWords(wordsArray);\n\n            setScore(0);\n            setLoading(false);\n        });\n    }\n\n    return (\n        <Button style={styles.buttonStyle} variant='primary' onClick={makeCall} disabled={loading}>\n            {loading ? \"Loading...\" : \"Get New Rack\"}\n        </Button>\n    );\n}","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport default function Instructions() {\n    const styles = {\n        container: {\n            margin: '8px',\n            maxWidth: '100%',\n        }\n    }\n    return (\n        <Container style={styles.container}>\n            <h1>Welcome to Scott and Sophia's TextTwist Clone!</h1>\n            <h3>Instructions</h3>\n            <p>\n\n                <strong>Object:</strong> To enter as many valid words as possible that can be formed from the given 7-letter rack\n                </p>\n            <p>\n                <strong>Game Play:</strong> To start, click <i>Get New Rack</i>. Use your keyboard to start typing a word from the letters in the rack. If you made a mistake, hit <i>Backspace</i>. Once you have finished typing the word, hit <i>Enter</i>. If the word is valid it will appear in a set of blanks below the rack and your typing area will be cleared.\n                </p>\n        </Container>\n    );\n}","import React from 'react';\n\nexport default function Score(props) {\n    const scoreStyle = {\n        display: \"inline-block\"\n    }\n    return (\n        <h4 style={scoreStyle}>\n            Score: {props.score}\n        </h4>\n    );\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nexport default function AnswersButton(props) {\n    const {setWords} = props;\n\n    const showAnswers = () => {\n        setWords(prevWords => {\n            var newWords = [...prevWords];\n            newWords.forEach((word) => word.found = true);\n            return newWords;\n        })\n    }\n\n    const styles = {\n        button: {\n            float: 'right',\n        }\n    }\n\n    return (\n        <Button onClick={showAnswers} variant='outline-primary' style={styles.button}>\n            Show Answers\n        </Button>\n    )\n}","import React from 'react'\n\nimport UserInput from './UserInput';\nimport RequestButton from './RequestButton';\nimport Instructions from './Instructions';\nimport Score from './Score';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport AnswersButton from './AnswersButton';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport TextBadge from '../UniversalComponents/TextBadge';\n\nexport default function Header(props) {\n    const { status, setStatus, words, setWords, rack, setRack, score, setScore } = props;\n\n    const colors = {\n        NONE: '#E9ECEF',\n        ERROR: '#ECB4B4',\n        CORRECT: '#B4ECB4'\n    }\n\n    const styles = {\n        jumbotronBase: {\n            padding: '4px',\n            transition: 'background-color .3s',\n            backgroundColor: colors[status],\n        },\n        container: {\n            margin: '8px',\n            maxWidth: '100%',\n        }\n    };\n\n    return (\n\n        <Jumbotron fluid style={styles.jumbotronBase}>\n            <Container style={styles.container}>\n                <Row>\n                    <Col xs={12}>\n                        <TextBadge fontSize={36}>\n                            text twist    \n                        </TextBadge>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12}>\n                        {\n                            rack.length === 0 ? <Instructions /> :\n                                <UserInput\n                                    words={words}\n                                    setWords={setWords}\n                                    rack={rack}\n                                    setRack={setRack}\n                                    setScore={setScore}\n                                    setStatus={setStatus}\n                                />\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12} sm={6}>\n                        {rack.length > 0 && <Score score={score} />}\n                    </Col>\n                    <Col xs={6} sm={3}>\n                        {rack.length > 0 && <AnswersButton setWords={setWords} />}\n                    </Col>\n                    <Col xs={6} sm={3}>\n                        <RequestButton setWords={setWords} setRack={setRack} setScore={setScore} />\n                    </Col>\n                </Row>\n            </Container>\n        </Jumbotron>\n    );\n}","import React, {useEffect} from 'react';\nimport RemainingWords from './WordDisplay/RemainingWords';\n\nimport Header from './PageHeader/Header';\n\nexport default function MainPage(props) {\n    const [words, setWords] = React.useState([]);\n    const [rack, setRack] = React.useState([]);\n    const [score, setScore] = React.useState(0);\n\n    const [status, setStatus] = React.useState('NONE'); \n\n    useEffect(() => {\n        var timeout;\n        if(status !== \"NONE\"){\n            timeout = setTimeout(() => setStatus('NONE'), 500);\n        }\n        return () => clearTimeout(timeout);\n    }, [status])\n\n    return (\n        <>\n            <Header\n                words={words}\n                setWords={setWords}\n                rack={rack}\n                setRack={setRack}\n                score={score}\n                setScore={setScore}\n                status={status}\n                setStatus={setStatus}\n            />\n            <RemainingWords\n                words={words}\n            />\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport MainPage from './Components/MainPage';\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// For bootstrap stylings\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}