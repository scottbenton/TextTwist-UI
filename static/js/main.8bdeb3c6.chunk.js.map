{"version":3,"sources":["Components/UserInput.jsx","Components/RequestButton.jsx","Components/RemainingWords.jsx","Components/Instructions.jsx","Components/Score.jsx","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["UserInput","props","setWords","rack","setRack","setScore","setStatus","React","useState","userInput","setUserInput","setAllUnused","useCallback","prevRack","newRack","forEach","char","used","console","log","handleKeyDown","event","preventDefault","key","toUpperCase","removedChar","prevInput","length","slice","found","map","match","newInput","prevWords","foundWord","findIndex","word","newWords","prevScore","useEffect","document","addEventListener","removeEventListener","styles","divStyle","centeringDiv","badgeStyle","Container","Row","Col","style","Array","from","index","className","CORS_API","PHP_URL","RequestButton","loading","setLoading","float","margin","variant","size","onClick","evt","axios","method","url","then","results","rackChars","data","wordsObject","Object","keys","words","wordsArray","wordObj","push","disabled","RemainingWords","xs","sm","md","lg","xl","letter","Instructions","Score","display","score","MainPage","status","timeout","setTimeout","clearTimeout","jumbotronBase","transition","backgroundColor","NONE","ERROR","CORRECT","fluid","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bdeb3c6.chunk.js","sourcesContent":["import React, { useEffect, useCallback } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nexport default function UserInput(props) {\n    const { setWords, rack, setRack, setScore, setStatus } = props;\n\n    const [userInput, setUserInput] = React.useState('');\n\n    const setAllUnused = useCallback(() => {\n        setRack(prevRack => {\n            var newRack = [...prevRack];\n            newRack.forEach(char => {\n                char.used = false;\n            });\n            console.log(newRack);\n            return newRack;\n        })\n    }, [setRack]);\n\n    const handleKeyDown = useCallback((event) => {\n        event.preventDefault();\n        var key = event.key.toUpperCase();\n        if (key === 'BACKSPACE') {\n            var removedChar = '';\n            setUserInput(prevInput => {\n                removedChar = prevInput[prevInput.length - 1];\n                return prevInput.length > 0 ? prevInput.slice(0, -1) : prevInput;\n            })\n            if (removedChar) {\n                setRack(prevRack => {\n                    var rack = [...prevRack];\n                    var found = false;\n                    var newRack = rack.map((char) => {\n                        if (!found && char.used && char.char === removedChar) {\n                            found = true;\n                            return { char: char.char, used: false };\n                        }\n                        else {\n                            return char;\n                        }\n                    })\n                    if (found) {\n                        return newRack;\n                    } else {\n                        return prevRack;\n                    }\n                })\n            }\n        }\n        // If the key pressed was alphabetical.\n        else if (key.length === 1 && key.match(/[A-Z]/i)) {\n            var found = false;\n            setRack(prevRack => {\n                var rack = [...prevRack];\n                var newRack = rack.map((char) => {\n                    if (!found && key === char.char && !char.used) {\n                        found = true;\n                        return { char: char.char, used: true };\n                    }\n                    else {\n                        return char;\n                    }\n                });\n                if (found) {\n                    return newRack;\n                } else {\n                    return prevRack;\n                }\n            })\n            if (found) {\n                setUserInput(prevInput => {\n                    prevInput += key;\n                    return prevInput;\n                })\n            }\n        }\n        else if (key === \"ENTER\") {\n            setUserInput(prevInput => {\n                var newInput = prevInput;\n                setWords(prevWords => {\n                    console.log(prevWords);\n                    console.log(prevInput);\n                    var foundWord = prevWords.findIndex((word) => {\n                        return !word.found && word.word === prevInput;\n                    });\n                    if (foundWord >= 0) {\n                        setAllUnused();\n                        newInput = '';\n                        var newWords = [...prevWords];\n                        newWords[foundWord].found = true;\n                        setScore(prevScore => prevScore+10);\n                        setStatus(\"CORRECT\");\n                        return newWords;\n                    } else {\n                        setAllUnused();\n                        setStatus(\"ERROR\");\n                        newInput = '';\n                        return prevWords;\n                    }\n                })\n                return newInput;\n            })\n        }\n    }, [setAllUnused, setRack, setWords, setScore]);\n\n\n    useEffect(() => {\n        console.log(userInput);\n    }, [userInput])\n\n    useEffect(() => {\n        // On load, add this event listener\n        document.addEventListener('keydown', (event) => handleKeyDown(event));\n        // On unload, remove this event listener\n        return () => {\n            document.removeEventListener('keydown', (event) => handleKeyDown(event));\n        }\n    }, [handleKeyDown]);\n\n    var styles = {\n        divStyle: {\n            'fontSize': '36px',\n            'padding': '4px',\n            'width': '100%',\n            'textAlign': 'center',\n        },\n        centeringDiv: {\n            'display': 'inline-block',\n            'margin': '0 auto',\n        },\n        badgeStyle: {\n            'display': 'inline-block',\n            'margin': '4px',\n            'width': '50px',\n            'border': '5px solid transparent',\n            'borderRadius': '15px',\n            'height': '50px',\n            'textAlign': 'center',\n            'lineHeight': '1',\n        }\n    }\n\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <div style={styles.divStyle}>\n                        <div style={styles.centeringDiv}>\n                            {Array.from(userInput).map((char, index) => (\n                                <div key={index} className=\"bg-primary text-white\" style={styles.badgeStyle}>{char}</div>\n                            ))}\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <div style={styles.divStyle}>\n                        <div style={styles.centeringDiv}>\n                            {rack.map((char, index) => {\n                                return char.used ? null : <div key={index} className=\"bg-secondary text-white\" style={styles.badgeStyle}>{char.char}</div>\n                            })}\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport axios from 'axios';\n\nconst CORS_API = 'https://cors-anywhere.herokuapp.com/'\nconst PHP_URL = 'http://texttwistbackend-env.u2wnmj8hvu.us-east-2.elasticbeanstalk.com./';\n\nexport default function RequestButton(props) {\n    const { setWords, setRack , setScore} = props;\n\n    const [loading, setLoading] = React.useState(false);\n\n    const styles = {\n        buttonStyle: {\n            float: 'right',\n            margin: '8px',\n        }\n    }\n\n    const makeCall = (evt) => {\n        evt.preventDefault();\n        setLoading(true);\n\n        axios({\n            method: 'get',\n            url: CORS_API + PHP_URL,\n        }).then((results) => {\n            const rackChars = (Array.from(results.data.rack));\n            console.log(rackChars);\n            const rack = rackChars.map((char) => ({char: char.toUpperCase(), used: false}));\n\n            console.log(rack);\n            setRack(rack);\n\n            var wordsObject = Object.keys(results.data.words);\n            console.log(wordsObject);\n            var wordsArray = [];\n            wordsObject.forEach((key) => {\n                console.log(key);\n                if (results.data.words[key]) {\n                    var wordObj = {\n                        word: results.data.words[key],\n                        found: false,\n                    }\n                    wordsArray.push(wordObj);\n                }\n            });\n\n            console.log(wordsArray);\n            setWords(wordsArray);\n\n            setScore(0);\n            setLoading(false);\n        });\n    }\n\n    return (\n        <Button style={styles.buttonStyle} variant='outline-primary' size=\"lg\" onClick={makeCall} disabled={loading}>\n            {loading ? \"Loading...\" : \"Get New Rack\"}\n        </Button>\n    );\n}","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\nexport default function RemainingWords(props) {\n    const { words } = props;\n    var styles = {\n        divStyle: {\n            'fontSize': '6px',\n            'padding': '1px',\n            'width': '100%',\n        },\n        badgeStyle: {\n            'display': 'inline-block',\n            'margin': '1px',\n            'width': '20px',\n            'border': '2px solid transparent',\n            'borderRadius': '5px',\n            'height': '20px',\n            'textAlign': 'center',\n            'lineHeight': '1',\n        }\n    }\n    return (\n        <Container>\n            <Row>\n                {words.map((word, index) => (\n                    <Col key={index} xs={12} sm={6} md={4} lg={3} xl={2}>\n                        {Array.from(word.word).map((letter, index) => (\n                            <div key={index} style={styles.badgeStyle} className=\"bg-primary text-white\">\n                                {(word.found ? letter : '')}\n                            </div>\n                        ))\n                        }\n                    </Col>\n                ))}\n            </Row>\n        </Container>\n    );\n}","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport default function Instructions() {\n    return (\n        <Container>\n            <h1>Welcome to Scott and Sophia's TextTwist Clone!</h1>\n            <h3>Instructions</h3>\n            <p>\n\n                <strong>Object:</strong> To enter as many valid words as possible that can be formed from the given 7-letter rack\n                </p>\n            <p>\n                <strong>Game Play:</strong> To start, click <i>Get New Rack</i>. Use your keyboard to start typing a word from the letters in the rack. If you made a mistake, hit <i>Backspace</i>. Once you have finished typing the word, hit <i>Enter</i>. If the word is valid it will appear in a set of blanks below the rack and your typing area will be cleared.\n                </p>\n        </Container>\n    );\n}","import React from 'react';\n\nexport default function Score(props) {\n    const scoreStyle = {\n        display: \"inline-block\"\n    }\n    return (\n        <h4 style={scoreStyle}>\n            Score: {props.score}\n        </h4>\n    );\n}","import React, {useEffect} from 'react';\nimport UserInput from './UserInput';\nimport RequestButton from './RequestButton';\nimport RemainingWords from './RemainingWords';\nimport Instructions from './Instructions';\nimport Score from './Score';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default function MainPage(props) {\n    const [words, setWords] = React.useState([]);\n    const [rack, setRack] = React.useState([]);\n    const [score, setScore] = React.useState(0);\n\n    const [status, setStatus] = React.useState('NONE'); \n\n    useEffect(() => {\n        var timeout;\n        if(status !== \"NONE\"){\n            timeout = setTimeout(() => setStatus('NONE'), 500);\n        }\n        return () => clearTimeout(timeout);\n    }, [status])\n\n    const colors = {\n        NONE: '#E9ECEF',\n        ERROR: '#ECB4B4',\n        CORRECT: '#B4ECB4'\n    }\n\n    const styles = {\n        jumbotronBase: {\n            transition: 'background-color .3s',\n            backgroundColor: colors[status],\n        }\n    };\n\n    return (\n        <>\n            <Jumbotron fluid style={styles.jumbotronBase}>\n                {\n                    rack.length === 0 ? <Instructions /> :\n                        <UserInput\n                            words={words}\n                            setWords={setWords}\n                            rack={rack}\n                            setRack={setRack}\n                            setScore={setScore}\n                            setStatus={setStatus}\n                        />\n                }\n                <div>\n                    {rack.length === 0 ? '' : <Score score={score} />}\n                    <RequestButton setWords={setWords} setRack={setRack} setScore={setScore} />\n                </div>\n\n            </Jumbotron>\n            <RemainingWords\n                words={words}\n            />\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport MainPage from './Components/MainPage';\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// For bootstrap stylings\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}