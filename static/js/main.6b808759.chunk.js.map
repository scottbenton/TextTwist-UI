{"version":3,"sources":["Components/UserInput.jsx","Components/RequestButton.jsx","Components/RemainingWords.jsx","Components/Instructions.jsx","Components/Score.jsx","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["UserInput","props","setWords","rack","setRack","setScore","React","useState","userInput","setUserInput","setAllUnused","useCallback","prevRack","newRack","forEach","char","used","console","log","handleKeyDown","event","preventDefault","key","toUpperCase","removedChar","prevInput","length","slice","found","map","match","newInput","prevWords","foundWord","findIndex","word","newWords","prevScore","useEffect","document","addEventListener","removeEventListener","styles","divStyle","centeringDiv","badgeStyle","Container","Row","Col","style","Array","from","index","className","CORS_API","PHP_URL","RequestButton","float","margin","variant","size","onClick","evt","axios","method","url","then","results","rackChars","data","wordsObject","Object","keys","words","wordsArray","wordObj","push","RemainingWords","xs","sm","md","lg","xl","letter","Instructions","Score","display","score","MainPage","fluid","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b808759.chunk.js","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\n\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nexport default function UserInput(props) {\r\n    const { setWords, rack, setRack, setScore } = props;\r\n\r\n    const [userInput, setUserInput] = React.useState('');\r\n\r\n    const setAllUnused = useCallback(() => {\r\n        setRack(prevRack => {\r\n            var newRack = [...prevRack];\r\n            newRack.forEach(char => {\r\n                char.used = false;\r\n            });\r\n            console.log(newRack);\r\n            return newRack;\r\n        })\r\n    }, [setRack]);\r\n\r\n    const handleKeyDown = useCallback((event) => {\r\n        event.preventDefault();\r\n        var key = event.key.toUpperCase();\r\n        if (key === 'BACKSPACE') {\r\n            var removedChar = '';\r\n            setUserInput(prevInput => {\r\n                removedChar = prevInput[prevInput.length - 1];\r\n                return prevInput.length > 0 ? prevInput.slice(0, -1) : prevInput;\r\n            })\r\n            if (removedChar) {\r\n                setRack(prevRack => {\r\n                    var rack = [...prevRack];\r\n                    var found = false;\r\n                    var newRack = rack.map((char) => {\r\n                        if (!found && char.used && char.char === removedChar) {\r\n                            found = true;\r\n                            return { char: char.char, used: false };\r\n                        }\r\n                        else {\r\n                            return char;\r\n                        }\r\n                    })\r\n                    if (found) {\r\n                        return newRack;\r\n                    } else {\r\n                        return prevRack;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        // If the key pressed was alphabetical.\r\n        else if (key.length === 1 && key.match(/[A-Z]/i)) {\r\n            var found = false;\r\n            setRack(prevRack => {\r\n                var rack = [...prevRack];\r\n                var newRack = rack.map((char) => {\r\n                    if (!found && key === char.char && !char.used) {\r\n                        found = true;\r\n                        return { char: char.char, used: true };\r\n                    }\r\n                    else {\r\n                        return char;\r\n                    }\r\n                });\r\n                if (found) {\r\n                    return newRack;\r\n                } else {\r\n                    return prevRack;\r\n                }\r\n            })\r\n            if (found) {\r\n                setUserInput(prevInput => {\r\n                    prevInput += key;\r\n                    return prevInput;\r\n                })\r\n            }\r\n        }\r\n        else if (key === \"ENTER\") {\r\n            setUserInput(prevInput => {\r\n                var newInput = prevInput;\r\n                setWords(prevWords => {\r\n                    console.log(prevWords);\r\n                    console.log(prevInput);\r\n                    var foundWord = prevWords.findIndex((word) => {\r\n                        return !word.found && word.word === prevInput;\r\n                    });\r\n                    if (foundWord >= 0) {\r\n                        setAllUnused();\r\n                        newInput = '';\r\n                        var newWords = [...prevWords];\r\n                        newWords[foundWord].found = true;\r\n                        setScore(prevScore => prevScore+10);\r\n                        return newWords;\r\n                    } else {\r\n                        setAllUnused();\r\n                        newInput = '';\r\n                        return prevWords;\r\n                    }\r\n                })\r\n                return newInput;\r\n            })\r\n        }\r\n    }, [setAllUnused, setRack, setWords, setScore]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(userInput);\r\n    }, [userInput])\r\n\r\n    useEffect(() => {\r\n        // On load, add this event listener\r\n        document.addEventListener('keydown', (event) => handleKeyDown(event));\r\n        // On unload, remove this event listener\r\n        return () => {\r\n            document.removeEventListener('keydown', (event) => handleKeyDown(event));\r\n        }\r\n    }, [handleKeyDown]);\r\n\r\n    var styles = {\r\n        divStyle: {\r\n            'fontSize': '36px',\r\n            'padding': '4px',\r\n            'width': '100%',\r\n            'textAlign': 'center',\r\n        },\r\n        centeringDiv: {\r\n            'display': 'inline-block',\r\n            'margin': '0 auto',\r\n        },\r\n        badgeStyle: {\r\n            'display': 'inline-block',\r\n            'margin': '4px',\r\n            'width': '50px',\r\n            'border': '5px solid transparent',\r\n            'borderRadius': '15px',\r\n            'height': '50px',\r\n            'textAlign': 'center',\r\n            'lineHeight': '1',\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <div style={styles.divStyle}>\r\n                        <div style={styles.centeringDiv}>\r\n                            {Array.from(userInput).map((char, index) => (\r\n                                <div key={index} className=\"bg-primary text-white\" style={styles.badgeStyle}>{char}</div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <div style={styles.divStyle}>\r\n                        <div style={styles.centeringDiv}>\r\n                            {rack.map((char, index) => {\r\n                                return char.used ? null : <div key={index} className=\"bg-secondary text-white\" style={styles.badgeStyle}>{char.char}</div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport axios from 'axios';\r\n\r\nconst CORS_API = 'https://cors-anywhere.herokuapp.com/'\r\nconst PHP_URL = 'http://texttwistbackend-env.u2wnmj8hvu.us-east-2.elasticbeanstalk.com./';\r\n\r\nexport default function RequestButton(props) {\r\n    const { setWords, setRack , setScore} = props;\r\n\r\n    const styles = {\r\n        buttonStyle: {\r\n            float: 'right',\r\n            margin: '8px',\r\n        }\r\n    }\r\n\r\n    const makeCall = (evt) => {\r\n        evt.preventDefault();\r\n\r\n        axios({\r\n            method: 'get',\r\n            url: CORS_API + PHP_URL,\r\n        }).then((results) => {\r\n            const rackChars = (Array.from(results.data.rack));\r\n            console.log(rackChars);\r\n            const rack = rackChars.map((char) => ({char: char.toUpperCase(), used: false}));\r\n\r\n            console.log(rack);\r\n            setRack(rack);\r\n\r\n            var wordsObject = Object.keys(results.data.words);\r\n            console.log(wordsObject);\r\n            var wordsArray = [];\r\n            wordsObject.forEach((key) => {\r\n                console.log(key);\r\n                if (results.data.words[key]) {\r\n                    var wordObj = {\r\n                        word: results.data.words[key],\r\n                        found: false,\r\n                    }\r\n                    wordsArray.push(wordObj);\r\n                }\r\n            });\r\n\r\n            console.log(wordsArray);\r\n            setWords(wordsArray);\r\n\r\n            setScore(0);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Button style={styles.buttonStyle} variant='outline-primary' size=\"lg\" onClick={makeCall}>\r\n            Get New Rack\r\n        </Button>\r\n    );\r\n}","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nexport default function RemainingWords(props) {\r\n    const { words } = props;\r\n    var styles = {\r\n        divStyle: {\r\n            'fontSize': '6px',\r\n            'padding': '1px',\r\n            'width': '100%',\r\n        },\r\n        badgeStyle: {\r\n            'display': 'inline-block',\r\n            'margin': '1px',\r\n            'width': '20px',\r\n            'border': '2px solid transparent',\r\n            'borderRadius': '5px',\r\n            'height': '20px',\r\n            'textAlign': 'center',\r\n            'lineHeight': '1',\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                {words.map((word, index) => (\r\n                    <Col key={index} xs={12} sm={6} md={4} lg={3} xl={2}>\r\n                        {Array.from(word.word).map((letter, index) => (\r\n                            <div key={index} style={styles.badgeStyle} className=\"bg-primary text-white\">\r\n                                {(word.found ? letter : '')}\r\n                            </div>\r\n                        ))\r\n                        }\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport default function Instructions() {\r\n    return (\r\n        <Container>\r\n            <h1>Welcome to Scott and Sophia's TextTwist Clone!</h1>\r\n            <h3>Instructions</h3>\r\n            <p>\r\n\r\n                <strong>Object:</strong> To enter as many valid words as possible that can be formed from the given 7-letter rack\r\n                </p>\r\n            <p>\r\n                <strong>Game Play:</strong> To start, click <i>Get New Rack</i>. Use your keyboard to start typing a word from the letters in the rack. If you made a mistake, hit <i>Backspace</i>. Once you have finished typing the word, hit <i>Enter</i>. If the word is valid it will appear in a set of blanks below the rack and your typing area will be cleared.\r\n                </p>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Score(props) {\r\n    const scoreStyle = {\r\n        display: \"inline-block\"\r\n    }\r\n    return (\r\n        <h4 style={scoreStyle}>\r\n            Score: {props.score}\r\n        </h4>\r\n    );\r\n}","import React from 'react';\r\nimport UserInput from './UserInput';\r\nimport RequestButton from './RequestButton';\r\nimport RemainingWords from './RemainingWords';\r\nimport Instructions from './Instructions';\r\nimport Score from './Score';\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n\r\nexport default function MainPage(props) {\r\n    const [words, setWords] = React.useState([]);\r\n    const [rack, setRack] = React.useState([]);\r\n    const [score, setScore] = React.useState(0);\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron fluid>\r\n                {\r\n                    rack.length === 0 ? <Instructions /> :\r\n                        <UserInput\r\n                            words={words}\r\n                            setWords={setWords}\r\n                            rack={rack}\r\n                            setRack={setRack}\r\n                            setScore={setScore}\r\n                        />\r\n                }\r\n                <div>\r\n                    {rack.length === 0 ? '' : <Score score={score} />}\r\n                    <RequestButton setWords={setWords} setRack={setRack} setScore={setScore} />\r\n                </div>\r\n\r\n            </Jumbotron>\r\n            <RemainingWords\r\n                words={words}\r\n            />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport MainPage from './Components/MainPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <MainPage />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// For bootstrap stylings\r\nimport './custom.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}